// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import {
  // @ts-ignore
  Address,
  // @ts-ignore
  AlgebraicType,
  // @ts-ignore
  AlgebraicValue,
  // @ts-ignore
  BinaryReader,
  // @ts-ignore
  BinaryWriter,
  // @ts-ignore
  DBConnectionBuilder,
  // @ts-ignore
  DBConnectionImpl,
  // @ts-ignore
  DBContext,
  // @ts-ignore
  Event,
  // @ts-ignore
  EventContextInterface,
  // @ts-ignore
  Identity,
  // @ts-ignore
  ProductType,
  // @ts-ignore
  ProductTypeElement,
  // @ts-ignore
  SumType,
  // @ts-ignore
  SumTypeVariant,
  // @ts-ignore
  TableCache,
  // @ts-ignore
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Add } from "./add_reducer.ts";
export { Add };

// Import and reexport all table handle types
import { BlobTableHandle } from "./blob_table.ts";
export { BlobTableHandle };

// Import and reexport all types
import { Blob } from "./blob_type.ts";
export { Blob };

const REMOTE_MODULE = {
  tables: {
    blob: {
      tableName: "blob",
      rowType: Blob.getTypeScriptAlgebraicType(),
    },
  },
  reducers: {
    add: {
      reducerName: "add",
      argsType: Add.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DBConnectionImpl to
  // extract type information from the generated RemoteModule.
  eventContextConstructor: (imp: DBConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DBConnection),
      event
    }
  },
  dbViewConstructor: (imp: DBConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DBConnectionImpl) => {
    return new RemoteReducers(imp);
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Add", args: Add }
;

export class RemoteReducers {
  constructor(private connection: DBConnectionImpl) {}

  add() {
    this.connection.callReducer("add", new Uint8Array(0));
  }

  onAdd(callback: (ctx: EventContext) => void) {
    this.connection.onReducer("add", callback);
  }

  removeOnAdd(callback: (ctx: EventContext) => void) {
    this.connection.offReducer("add", callback);
  }

}

export class RemoteTables {
  constructor(private connection: DBConnectionImpl) {}

  get blob(): BlobTableHandle {
    return new BlobTableHandle(this.connection.clientCache.getOrCreateTable<Blob>(REMOTE_MODULE.tables.blob));
  }
}

export class DBConnection extends DBConnectionImpl<RemoteTables, RemoteReducers>  {
  static builder = (): DBConnectionBuilder<DBConnection>  => {
    return new DBConnectionBuilder<DBConnection>(REMOTE_MODULE, (imp: DBConnectionImpl) => imp as DBConnection);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, Reducer>;
