// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import {
  __SPACETIMEDB__,
  AlgebraicType,
  ProductType,
  BuiltinType,
  ProductTypeElement,
  SumType,
  SumTypeVariant,
  DatabaseTable,
  AlgebraicValue,
  ReducerEvent,
  Identity,
  Address,
  ClientDB,
  SpacetimeDBClient,
} from "../../src/index";
// @ts-ignore
import { Point } from "./point";

export class Player extends DatabaseTable {
  public static db: ClientDB = __SPACETIMEDB__.clientDB;
  public static tableName = "Player";
  public ownerId: string;
  public name: string;
  public location: Point;

  public static primaryKey: string | undefined = "ownerId";

  constructor(ownerId: string, name: string, location: Point) {
    super();
    this.ownerId = ownerId;
    this.name = name;
    this.location = location;
  }

  public static serialize(value: Player): object {
    return [value.ownerId, value.name, Point.serialize(value.location)];
  }

  public static getAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement(
        "ownerId",
        AlgebraicType.createPrimitiveType(BuiltinType.Type.String)
      ),
      new ProductTypeElement(
        "name",
        AlgebraicType.createPrimitiveType(BuiltinType.Type.String)
      ),
      new ProductTypeElement("location", Point.getAlgebraicType()),
    ]);
  }

  public static fromValue(value: AlgebraicValue): Player {
    let productValue = value.asProductValue();
    let __owner_id = productValue.elements[0].asString();
    let __name = productValue.elements[1].asString();
    let __location = Point.fromValue(productValue.elements[2]);
    return new this(__owner_id, __name, __location);
  }

  public static filterByOwnerId(value: string): Player | null {
    for (let instance of this.db.getTable("Player").getInstances()) {
      if (instance.ownerId === value) {
        return instance;
      }
    }
    return null;
  }

  public static filterByName(value: string): Player[] {
    let result: Player[] = [];
    for (let instance of this.db.getTable("Player").getInstances()) {
      if (instance.name === value) {
        result.push(instance);
      }
    }
    return result;
  }
}

export default Player;
