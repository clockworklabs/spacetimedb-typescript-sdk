// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import { AlgebraicType, AlgebraicValue, SumTypeVariant } from '../index';

export namespace EncodedValue {
  export function getAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant('Binary', AlgebraicType.createBytesType()),
      new SumTypeVariant('Text', AlgebraicType.createStringType()),
    ]);
  }

  export function serialize(value: EncodedValue): object {
    switch (value.tag) {
      case 'Binary':
        return { Binary: Array.from(value.value) };
      case 'Text':
        return { Text: value.value };
      default:
        throw 'unreachable';
    }
  }

  export type Binary = { tag: 'Binary'; value: Uint8Array };
  export const Binary = (value: Uint8Array): Binary => ({
    tag: 'Binary',
    value,
  });
  export type Text = { tag: 'Text'; value: string };
  export const Text = (value: string): Text => ({ tag: 'Text', value });

  export function fromValue(value: AlgebraicValue): EncodedValue {
    let sumValue = value.asSumValue();
    switch (sumValue.tag) {
      case 0:
        return { tag: 'Binary', value: sumValue.value.asBytes() };
      case 1:
        return { tag: 'Text', value: sumValue.value.asString() };
      default:
        throw 'unreachable';
    }
  }
}

export type EncodedValue = EncodedValue.Binary | EncodedValue.Text;
export default EncodedValue;
