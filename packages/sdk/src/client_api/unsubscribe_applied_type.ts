// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

import {
  // @ts-ignore
  AlgebraicType,
  // @ts-ignore
  AlgebraicValue,
  // @ts-ignore
  BinaryReader,
  // @ts-ignore
  BinaryWriter,
  // @ts-ignore
  CallReducerFlags,
  // @ts-ignore
  ConnectionId,
  // @ts-ignore
  DBConnectionBuilder,
  // @ts-ignore
  DBConnectionImpl,
  // @ts-ignore
  DBContext,
  // @ts-ignore
  Event,
  // @ts-ignore
  EventContextInterface,
  // @ts-ignore
  Identity,
  // @ts-ignore
  ProductType,
  // @ts-ignore
  ProductTypeElement,
  // @ts-ignore
  SumType,
  // @ts-ignore
  SumTypeVariant,
  // @ts-ignore
  TableCache,
  // @ts-ignore
  deepEqual,
} from "../index";
// @ts-ignore
import { QueryId as __QueryId } from "./query_id_type";
// @ts-ignore
import { SubscribeRows as __SubscribeRows } from "./subscribe_rows_type";

export type UnsubscribeApplied = {
  requestId: number,
  totalHostExecutionDurationMicros: bigint,
  queryId: __QueryId,
  rows: __SubscribeRows,
};

/**
 * A namespace for generated helper functions.
 */
export namespace UnsubscribeApplied {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("requestId", AlgebraicType.createU32Type()),
      new ProductTypeElement("totalHostExecutionDurationMicros", AlgebraicType.createU64Type()),
      new ProductTypeElement("queryId", __QueryId.getTypeScriptAlgebraicType()),
      new ProductTypeElement("rows", __SubscribeRows.getTypeScriptAlgebraicType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: UnsubscribeApplied): void {
    UnsubscribeApplied.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): UnsubscribeApplied {
    return UnsubscribeApplied.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


