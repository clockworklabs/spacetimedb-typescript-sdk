name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:

jobs:
  compile-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        with:
          version: 9.7
          run_install: true

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Compile
        run: pnpm compile

      - name: Run tests
        run: pnpm test

      # Grab the SpacetimeDB branch name from the PR description. If it's not found, master will be used instead.
      # We'll use this branch name for any integration tests with SpacetimeDB.
      - name: Extract SpacetimeDB branch name or PR link from PR description
        id: extract-branch
        if: github.event_name == 'pull_request'
        env:
          description: ${{ github.event.pull_request.body }}
        run: |
          # Check if description contains a branch name or a PR link
          branch_or_pr=$(echo "$description" | grep -oP '(?<=SpacetimeDB branch name:\s).+')
          echo "Branch or PR found: $branch_or_pr"

          if [[ -z "$branch_or_pr" ]]; then
            branch="master"
          elif [[ "$branch_or_pr" =~ ^https://github.com/.*/pull/[0-9]+$ ]]; then
            # If it's a PR link, extract the branch name from the PR
            pr_number=$(echo "$branch_or_pr" | grep -oP '[0-9]+$')
            branch=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/clockworklabs/SpacetimeDB/pulls/$pr_number | jq -r '.head.ref')
          else
            # It's already a branch name
            branch="$branch_or_pr"
          fi

          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "Final branch name: $branch"

      - name: Checkout SpacetimeDB
        uses: actions/checkout@v4
        with:
          repository: clockworklabs/SpacetimeDB
          ref: ${{ steps.extract-branch.outputs.branch }}
          path: SpacetimeDB

      - name: Install Rust toolchain
        uses: dsherret/rust-toolchain-file@v1

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: unity-tests~/server-rust
          shared-key: UnityTestServer

      - name: Install SpacetimeDB CLI from the local checkout
        run: |
          cargo install --force --path SpacetimeDB/crates/cli --locked --message-format=short
          cargo install --force --path SpacetimeDB/crates/standalone --locked --message-format=short
          # Add a handy alias using the old binary name, so that we don't have to rewrite all scripts (incl. in submodules).
          rm $HOME/.cargo/bin/spacetime || echo "haven't run on this host before"
          ln -s $HOME/.cargo/bin/spacetimedb-cli $HOME/.cargo/bin/spacetime
          # Clear any existing information
          spacetime server clear -y
        env:
          # Share the target directory with our local project to avoid rebuilding same SpacetimeDB crates twice.
          CARGO_TARGET_DIR: SpacetimeDB/modules/quickstart-chat/target

      - name: Generate client bindings
        working-directory: SpacetimeDB/modules/quickstart-chat
        run: spacetime generate --lang typescript --out-dir ../../../examples/quickstart-chat/src/module_bindings

      - name: Check for changes
        run: |
          git diff --exit-code unity-tests~/client/Assets/Scripts/autogen || {
              echo "Error: Bindings are dirty. Please generate bindings again and commit them to this branch."
              exit 1
          }

      - name: Start SpacetimeDB
        run: |
          spacetime start &
          disown

      - name: Publish module to SpacetimeDB
        working-directory: SpacetimeDB/modules/quickstart-chat
        run: |
          spacetime logout && spacetime login --server-issued-login local
          bash ./publish.sh

      - name: Run quickstart-chat tests
        run: |
          echo "HAP"
