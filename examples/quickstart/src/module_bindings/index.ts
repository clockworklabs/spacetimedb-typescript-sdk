// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import {
    // @ts-ignore
    AlgebraicType,
    // @ts-ignore
    ProductType,
    // @ts-ignore
    ProductTypeElement,
    // @ts-ignore
    SumType,
    // @ts-ignore
    SumTypeVariant,
    // @ts-ignore
    AlgebraicValue,
    // @ts-ignore
    Identity,
    // @ts-ignore
    Address,
    // @ts-ignore
    DBConnectionBuilder,
    // @ts-ignore
    TableCache,
    // @ts-ignore
    BinaryWriter,
    // @ts-ignore
    EventContext,
    // @ts-ignore
    BinaryReader,
    // @ts-ignore
    DBConnectionImpl,
    // @ts-ignore
    DBContext,
    // @ts-ignore
    Event,
} from "@clockworklabs/spacetimedb-sdk";

// Import all reducer arg types
import { IdentityConnected } from "./identity_connected_reducer.ts";
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
import { Init } from "./init_reducer.ts";
import { SendMessage } from "./send_message_reducer.ts";
import { SetName } from "./set_name_reducer.ts";

// Import all table handle types
import { MessageTableHandle } from "./message_table.ts";
import { UserTableHandle } from "./user_table.ts";

// Import all types
import { Message } from "./message_type.ts";
import { User } from "./user_type.ts";

const REMOTE_MODULE = {
	tables: {
		Message: {
			tableName: "Message",
			rowType: Message.getAlgebraicType(),
		},
		User: {
			tableName: "User",
			rowType: User.getAlgebraicType(),
			primaryKey: "identity",
		},
	},
	reducers: {
		__identity_connected__: {
			reducerName: "__identity_connected__",
			argsType: IdentityConnected.getAlgebraicType(),
		},
		__identity_disconnected__: {
			reducerName: "__identity_disconnected__",
			argsType: IdentityDisconnected.getAlgebraicType(),
		},
		__init__: {
			reducerName: "__init__",
			argsType: Init.getAlgebraicType(),
		},
		send_message: {
			reducerName: "send_message",
			argsType: SendMessage.getAlgebraicType(),
		},
		set_name: {
			reducerName: "set_name",
			argsType: SetName.getAlgebraicType(),
		},
	},
	// Constructors which are used by the DBConnectionImpl to
	// extract type information from the generated RemoteModule.
	eventContextConstructor: (imp: DBConnectionImpl, event: Event<Reducer>) => {
	  return {
	    ...(imp as DBConnection),
	    event
	  }
	},
	dbViewConstructor: (imp: DBConnectionImpl) => {
	  return new RemoteTables(imp);
	},
	reducersConstructor: (imp: DBConnectionImpl) => {
	  return new RemoteReducers(imp);
	}
}

// A type representing all the possible variants of a reducer.
export type Reducer = 
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "Init", args: Init }
| { name: "SendMessage", args: SendMessage }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
	constructor(private connection: DBConnectionImpl) {}

	identityConnected(args: IdentityConnected) {
		let writer = new BinaryWriter(1024);
		IdentityConnected.getAlgebraicType().serialize(writer, args);
		let argsBuffer = writer.getBuffer();
		this.connection.callReducer("__identity_connected__", argsBuffer);
	}

	onIdentityConnected(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>) => void) {
		this.connection.onReducer("__identity_connected__", callback);
	}

	identityDisconnected(args: IdentityDisconnected) {
		let writer = new BinaryWriter(1024);
		IdentityDisconnected.getAlgebraicType().serialize(writer, args);
		let argsBuffer = writer.getBuffer();
		this.connection.callReducer("__identity_disconnected__", argsBuffer);
	}

	onIdentityDisconnected(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>) => void) {
		this.connection.onReducer("__identity_disconnected__", callback);
	}

	init(args: Init) {
		let writer = new BinaryWriter(1024);
		Init.getAlgebraicType().serialize(writer, args);
		let argsBuffer = writer.getBuffer();
		this.connection.callReducer("__init__", argsBuffer);
	}

	onInit(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>) => void) {
		this.connection.onReducer("__init__", callback);
	}

	sendMessage(args: SendMessage) {
		let writer = new BinaryWriter(1024);
		SendMessage.getAlgebraicType().serialize(writer, args);
		let argsBuffer = writer.getBuffer();
		this.connection.callReducer("send_message", argsBuffer);
	}

	onSendMessage(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>, text: string) => void) {
		this.connection.onReducer("send_message", callback);
	}

	setName(args: SetName) {
		let writer = new BinaryWriter(1024);
		SetName.getAlgebraicType().serialize(writer, args);
		let argsBuffer = writer.getBuffer();
		this.connection.callReducer("set_name", argsBuffer);
	}

	onSetName(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>, name: string) => void) {
		this.connection.onReducer("set_name", callback);
	}

}

export class RemoteTables {
	constructor(private connection: DBConnectionImpl) {}

	#message = this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.Message);
	get message(): MessageTableHandle {
		return new MessageTableHandle(this.#message);
	}
	#user = this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.User);
	get user(): UserTableHandle {
		return new UserTableHandle(this.#user);
	}
}

export class DBConnection extends DBConnectionImpl<RemoteTables, RemoteReducers>  {
	static builder = () => {
		return new DBConnectionBuilder<DBConnection>(REMOTE_MODULE, (imp: DBConnectionImpl) => imp as DBConnection);
	}
}
