// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import {
  AlgebraicType,
  AlgebraicValue,
  DBConnectionBase,
  DbContext,
  Identity,
  ProductTypeElement,
  SumTypeVariant,
} from '@clockworklabs/spacetimedb-sdk';

export type User = {
  identity: Identity;
  name: string | null;
  online: boolean;
};

export class UserTableHandle<
  DbView,
  ReducerView,
  ReducerEnum,
  EventContext extends DbContext<DbView, ReducerView>,
> {
  #client: DBConnectionBase<ReducerEnum, EventContext>;
  tableName = 'User';

  identity: Identity;
  name: string | null;
  online: boolean;

  primaryKey?: string = 'identity';

  constructor(
    client: DBConnectionBase,
    identity?: Identity,
    name?: string | null,
    online?: boolean
  ) {
    this.#client = client;
    this.identity = identity!;
    this.name = name!;
    this.online = online!;
  }

  static serialize(value: User): object {
    return [
      Array.from(value.identity.toUint8Array()),
      value.name ? { some: value.name } : { none: [] },
      value.online,
    ];
  }

  static getAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement(
        'identity',
        AlgebraicType.createProductType([
          new ProductTypeElement(
            '__identity_bytes',
            AlgebraicType.createArrayType(AlgebraicType.createU8Type())
          ),
        ])
      ),
      new ProductTypeElement(
        'name',
        AlgebraicType.createSumType([
          new SumTypeVariant('some', AlgebraicType.createStringType()),
          new SumTypeVariant('none', AlgebraicType.createProductType([])),
        ])
      ),
      new ProductTypeElement('online', AlgebraicType.createBoolType()),
    ]);
  }

  static fromValue<
    DbView,
    ReducerView,
    ReducerEnum,
    EventContext extends DbContext<DbView, ReducerView>,
  >(
    client: DBConnectionBase<ReducerEnum, EventContext>,
    value: AlgebraicValue
  ): UserTableHandle<DbView, ReducerView, ReducerEnum, EventContext> {
    let productValue = value.asProductValue();
    let __identity = productValue.elements[0].asIdentity();
    let __name =
      productValue.elements[1].asSumValue().tag == 1
        ? null
        : productValue.elements[1].asSumValue().value.asString();
    let __online = productValue.elements[2].asBoolean();
    return new this(client, __identity, __name, __online);
  }

  *filterByIdentity(value: Identity): IterableIterator<User> {
    for (let instance of this.#client.db.getTable('User').getInstances()) {
      if (instance.identity.isEqual(value)) {
        yield instance;
      }
    }
  }

  findByIdentity(value: Identity): User | undefined {
    return this.filterByIdentity(value).next().value;
  }

  *filterByOnline(value: boolean): IterableIterator<User> {
    for (let instance of this.#client.db.getTable('User').getInstances()) {
      if (instance.online === value) {
        yield instance;
      }
    }
  }
}

export default User;
