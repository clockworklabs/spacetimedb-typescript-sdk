// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import {
    AlgebraicType,
    ProductType,
    ProductTypeElement,
    SumType,
    SumTypeVariant,
    AlgebraicValue,
    Identity,
    Address,
    DBConnectionBuilder,
    TableCache,
    BinaryWriter,
    EventContext,
    BinaryReader,
    DBConnectionImpl,
    DBContext,
} from "@clockworklabs/spacetimedb-sdk";

import { User } from "./user_type";
import { Message } from "./message_type";
import { SetName } from "./set_name_reducer";
import { IdentityDisconnected } from "./identity_disconnected_reducer";
import { IdentityConnected } from "./identity_connected_reducer";
import { Init } from "./init_reducer";
import { SendMessage } from "./send_message_reducer";
import { UserTableHandle } from "./user_table";
import { MessageTableHandle } from "./message_table";

const REMOTE_MODULE = {
	tables: {
		User: {
			tableName: "User",
			rowType: User.getAlgebraicType(),
			primaryKey: "identity",
		},
		Message: {
			tableName: "Message",
			rowType: Message.getAlgebraicType(),
		},
  },
  reducers: {
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getAlgebraicType(),
    },
    __identity_disconnected__: {
      reducerName: "__identity_disconnected__",
      argsType: IdentityDisconnected.getAlgebraicType(),
    },
    __identity_connected__: {
      reducerName: "__identity_connected__",
      argsType: IdentityConnected.getAlgebraicType(),
    },
    __init__: {
      reducerName: "__init__",
      argsType: Init.getAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getAlgebraicType(),
    },
  },
  createRemoteTables: (connection: DBConnectionImpl) => {
    return new RemoteTables(connection);
  },
  createRemoteReducers: (connection: DBConnectionImpl) => {
    return new RemoteReducers(connection);
  }
}

class RemoteReducers {
  constructor(private connection: DBConnectionImpl) {
    connection.reducers = this;
  }
  
  setName(name: string) {
    let writer = new BinaryWriter(1024);
    SetName.getAlgebraicType().serialize(writer, { name });
    let argsBuffer = writer.getBuffer();
    this.connection.callReducer("set_name", argsBuffer);
  }

  identityDisconnected() {
    let writer = new BinaryWriter(1024);
    IdentityDisconnected.getAlgebraicType().serialize(writer, {});
    let argsBuffer = writer.getBuffer();
    this.connection.callReducer("__identity_disconnected__", argsBuffer);
  }

  identityConnected() {
    let writer = new BinaryWriter(1024);
    IdentityConnected.getAlgebraicType().serialize(writer, {});
    let argsBuffer = writer.getBuffer();
    this.connection.callReducer("__identity_connected__", argsBuffer);
  }

  init() {
    let writer = new BinaryWriter(1024);
    Init.getAlgebraicType().serialize(writer, {});
    let argsBuffer = writer.getBuffer();
    this.connection.callReducer("__init__", argsBuffer);
  }

  sendMessage(text: string) {
    let writer = new BinaryWriter(1024);
    SendMessage.getAlgebraicType().serialize(writer, { text });
    let argsBuffer = writer.getBuffer();
    this.connection.callReducer("send_message", argsBuffer);
  }

  onSetName(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  onIdentityDisconnected(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>) => void) {
    this.connection.onReducer("__identity_disconnected__", callback);
  }

  onIdentityConnected(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>) => void) {
    this.connection.onReducer("__identity_connected__", callback);
  }

  onInit(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>) => void) {
    this.connection.onReducer("__init__", callback);
  }

  onSendMessage(callback: (ctx: EventContext<RemoteTables, RemoteReducers, Reducer>, text: string) => void) {
    this.connection.onReducer<[string]>("send_message", callback);
  }
}

type Reducer = { name: 'setName', args: SetName } 
| { name: 'identityDisconnected' }
| { name: 'identityConnected' }
| { name: 'init' }
| { name: 'sendMessage', args: SendMessage };

class RemoteTables {
  constructor(private connection: DBConnectionImpl) {}

  #user = this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.User);
  #message = this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.Message);

  get user(): UserTableHandle {
    return new UserTableHandle(this.#user);
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.#message);
  }
}

export class DBConnection implements DBContext<RemoteTables, RemoteReducers> {
  imp: DBConnectionImpl;
  db: RemoteTables;
  reducers: RemoteReducers;
  isActive: boolean;

  constructor(imp: DBConnectionImpl) {
    this.imp = imp;
    this.db = new RemoteTables(imp);
    this.reducers = new RemoteReducers(imp);
    this.isActive = false;
  }

  disconnect = () => {
    this.imp.disconnect();
  };

  subscriptionBuilder = () => {
    return this.imp.subscriptionBuilder();
  };

  builder = () => {
    return new DBConnectionBuilder<DBConnection>(REMOTE_MODULE, (imp: DBConnectionImpl) => new DBConnection(imp));
  }
}
